import pandas as pd
import numpy as np
import optuna
from catboost import CatBoostClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import log_loss

def objective(trial):
    global X_train, X_valid, y_train, y_valid, categorical_features_indices

    param = {
        'iterations': trial.suggest_int('iterations', 100, 1000),
        'learning_rate': trial.suggest_loguniform('learning_rate', 1e-3, 0.3),
        'depth': trial.suggest_int('depth', 4, 10),
        'l2_leaf_reg': trial.suggest_loguniform('l2_leaf_reg', 1e-3, 10),
        'random_strength': trial.suggest_uniform('random_strength', 1e-3, 10),
        'bagging_temperature': trial.suggest_uniform('bagging_temperature', 0, 1),
        'border_count': trial.suggest_int('border_count', 32, 255),
        'task_type': 'CPU',
        'eval_metric': 'Logloss',
        'loss_function': 'Logloss',
        'verbose': False
    }

    model = CatBoostClassifier(**param)

    model.fit(
        X_train, y_train,
        eval_set=(X_valid, y_valid),
        cat_features=categorical_features_indices,
        use_best_model=True,
        early_stopping_rounds=50
    )

    y_pred = model.predict_proba(X_valid)[:, 1]
    score = log_loss(y_valid, y_pred)

    return score

if __name__ == '__main__':
    data = pd.read_csv('path_to_train_data.csv')

    target = 'target'
    y = data[target]
    X = data.drop(columns=[target])

    numerical_features = ['l1', 'l2', 'ts']

    categorical_features = [col for col in X.columns if col not in numerical_features]
    categorical_features_indices = [X.columns.get_loc(col) for col in categorical_features]

    X_train, X_valid, y_train, y_valid = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    study = optuna.create_study(direction='minimize')
    study.optimize(objective, n_trials=50)

    print('Best trial:')
    trial = study.best_trial
    print('  Value: {}'.format(trial.value))
    print('  Params: ')
    for key, value in trial.params.items():
        print('    {}: {}'.format(key, value))
